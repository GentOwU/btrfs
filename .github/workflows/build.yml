name: Build

on: [push]

env:
  PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/etc/eselect/wine/bin

jobs:
  cmake:
    runs-on: ubuntu-latest  # Change to use Ubuntu instead of msvc-wine
    steps:
      - name: Set up Wine
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y wine64 wine32

      - name: Set short SHA for use in the build
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV

      - name: Clone repository
        run: git clone --recurse-submodules -j$(nproc) ${{ github.server_url }}/${{ github.repository }} ${SHORT_SHA}

      - name: Checkout specific commit
        run: cd ${SHORT_SHA} && git checkout ${{ github.sha }}

      - name: Create directories for build output
        run: |
          mkdir -p build/debug/{amd64,x86,aarch64,arm}
          mkdir -p build/release/{amd64,x86,aarch64,arm}
          mkdir -p build/pdb/{debug,release}/{amd64,x86,aarch64,arm}

     - name: Build for amd64 debug
          run: |
           cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_TEST=OFF \
              -DCMAKE_C_COMPILER=/opt/wine/bin/winegcc \
              -DCMAKE_CXX_COMPILER=/opt/wine/bin/wineg++ \
              -S ${SHORT_SHA} \
              -B build/debug/amd64 && cmake --build build/debug/amd64 --parallel $(nproc)

      - name: Build for x86 debug
        run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S ${SHORT_SHA} -B build/debug/x86 && cmake --build build/debug/x86 --parallel $(nproc)

      - name: Build for aarch64 debug
        run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S ${SHORT_SHA} -B build/debug/aarch64 && cmake --build build/debug/aarch64 --parallel $(nproc)

      - name: Build for arm debug
        run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S ${SHORT_SHA} -B build/debug/arm && cmake --build build/debug/arm --parallel $(nproc)

      - name: Build for amd64 release
        run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S ${SHORT_SHA} -B build/release/amd64 && cmake --build build/release/amd64 --parallel $(nproc)

      - name: Build for x86 release
        run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S ${SHORT_SHA} -B build/release/x86 && cmake --build build/release/x86 --parallel $(nproc)

      - name: Build for aarch64 release
        run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S ${SHORT_SHA} -B build/release/aarch64 && cmake --build build/release/aarch64 --parallel $(nproc)

      - name: Build for arm release
        run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S ${SHORT_SHA} -B build/release/arm && cmake --build build/release/arm --parallel $(nproc)

      - name: Move PDB files for debug
        run: |
          mv build/debug/amd64/*.pdb build/pdb/debug/amd64/
          mv build/debug/x86/*.pdb build/pdb/debug/x86/
          mv build/debug/aarch64/*.pdb build/pdb/debug/aarch64/
          mv build/debug/arm/*.pdb build/pdb/debug/arm/

      - name: Move PDB files for release
        run: |
          mv build/release/amd64/*.pdb build/pdb/release/amd64/
          mv build/release/x86/*.pdb build/pdb/release/x86/
          mv build/release/aarch64/*.pdb build/pdb/release/aarch64/
          mv build/release/arm/*.pdb build/pdb/release/arm/

      - name: Copy INF files to debug and release directories
        run: |
          cp ${SHORT_SHA}/src/{btrfs,btrfs-vol}.inf build/debug/
          cp ${SHORT_SHA}/src/{btrfs,btrfs-vol}.inf build/release/

      - name: Stamp INF files for debug
        run: |
          stampinf -f build/debug/btrfs.inf -d * -v *
          stampinf -f build/debug/btrfs-vol.inf -d * -v *

      - name: Stamp INF files for release
        run: |
          stampinf -f build/release/btrfs.inf -d * -v *
          stampinf -f build/release/btrfs-vol.inf -d * -v *

      - name: Make catalog files for debug
        run: cd build/debug && makecat ../../${SHORT_SHA}/src/btrfs.cdf

      - name: Make catalog files for release
        run: cd build/release && makecat ../../${SHORT_SHA}/src/btrfs.cdf

      - name: Store certificate for signing
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}
        run: echo "${CERTIFICATE}" > codesigning.crt

      - name: Sign catalog files using PKCS11
        env:
          PKCS11CERT: ${{ secrets.PKCS11CERT }}
          PKCS11KEY: ${{ secrets.PKCS11KEY }}
        run: |
          for i in build/{debug,release}/btrfs.cat; do
            osslsigncode sign -pkcs11module /usr/lib64/libcrypto3PKCS.so -pkcs11cert "${PKCS11CERT}" -key "${PKCS11KEY}" -certs codesigning.crt -t http://timestamp.digicert.com -in $i -out tmp && mv tmp $i;
          done

      - name: Sign binaries using PKCS11
        env:
          PKCS11CERT: ${{ secrets.PKCS11CERT }}
          PKCS11KEY: ${{ secrets.PKCS11KEY }}
        run: |
          for i in build/{debug,release}/{amd64,x86,aarch64,arm}/{btrfs.sys,mkbtrfs.exe,shellbtrfs.dll,ubtrfs.dll}; do
            osslsigncode sign -pkcs11module /usr/lib64/libcrypto3PKCS.so -pkcs11cert "${PKCS11CERT}" -key "${PKCS11KEY}" -certs codesigning.crt -t http://timestamp.digicert.com -ph -in $i -out tmp && mv tmp $i;
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.sha }}
          overwrite: true
          path: |
            build/**/btrfs.sys
            build/**/mkbtrfs.exe
            build/**/shellbtrfs.dll
            build/**/ubtrfs.dll
            build/**/*.inf
            build/**/*.cat
            build/pdb
